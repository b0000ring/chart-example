<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on chartexample.com</title>
    <link>https://chartexample.com/blog/</link>
    <description>Recent content in Blogs on chartexample.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 23 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chartexample.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State in D3 chart lifecycle</title>
      <link>https://chartexample.com/blog/chart-lifecycle/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chartexample.com/blog/chart-lifecycle/</guid>
      <description>Integration of D3 data visualizations into front-end applications can be a tricky task, when a plot lifecycle is controlled by the application, sometimes it may be unclear how to properly connect the plot and the application. In this article, I describe some ways to update plots with saving their internal state.
Plot internal state When creating a D3 plot to visualize some data it frequently happens that to improve user experience some interactivity should be added.</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>https://chartexample.com/blog/first-post/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chartexample.com/blog/first-post/</guid>
      <description>For my first post here I have decided to put my little game created for pico-8 fantasy console.
I also have a personal page on itch.io (with not so much to see on it)</description>
    </item>
    
  </channel>
</rss>
